git branch -d -r 远程分支名称	//删除本地库的远程分支名指向
git push origin :remote_branch_name//删除远程库当中分支
git diff 版本号 版本号 文件名	//比较两个版本文件的变化
git rm --cached 文件名	//取消该文件的跟踪
====================================================
分支合并和rebase
C代码  
git merge <branch>               # 将branch分支合并到当前分支  
git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交     
git rebase master <branch>       # 将master rebase到branch，相当于：  
git co <branch> && git rebase master && git co master && git merge <branch>  
====================================================
Git暂存管理
C代码  
git stash                        # 暂存  
git stash list                   # 列所有stash  
git stash apply                  # 恢复暂存的内容  
git stash drop                   # 删除暂存区  
git stash pop                    # 弹出暂存区  
====================================================
创建远程仓库
git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上
mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库
git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址
git push -u origin master # 客户端首次提交
git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track
git remote set-head origin master # 设置远程仓库的HEAD指向master分支
也可以命令设置跟踪远程库和本地库
git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
====================================================
git config --global color.ui true
开启颜色
git init repositoryname
直接以这个仓库名字创建仓库目录
git commit -m "loginfomation"
直接命令行提交日志

git rev-parse --git-dirf
显示版本库所在目录

git rev-parse --show-toplevel
显示库根目录的绝对路径

git rev-parse --show-prefix
显示本目录相对工作区根目录的相对路径


git commit --amend -m "logname"
重新提交当前内容，加入到上次提交的内容当中，并重新logname提交描述

git status -s
精简模式输出文件状态

git add newfile
加入更改文件

git checkout filename（取消文件修改）
将已经工作区当中，已经登记修改的文件，恢复到版本库当中的状态

git reset newfile
撤销提交到缓存的文件

git log --pretty=oneline（样子只显示一行，翻译）
显示日志内容，只显示16hash值 和 描述

git ls-tree -l HEAD
查看该版本库中文件详情

git ls-files -s
显示暂存区当中的文件

git clean -fd
清除工作区所有未登记的无关文件

git log --pretty=raw --graph 
显示log相信信息的关系树

git log --pretty=oenline(或--online) --graph
显示提交节点单行信息的目录树

git rev-parse master
显示引用对应的id

git cat-file -p e1987a3:head.h
查看e1987a3中的head.h文件内容

tail -5 .git/logs/refs/heads/develop
查看develop分支的最后5次操作日志

git push origin current-use
推送一个新建的分支到服务器上current-use分支可以是本地新建，但服务器上没有的分支

git reflog show develop
查看develop日志

git reset --hard develop@{1}
恢复日志当中的向前的第一条（与上一步共同结合使用）

git rev-parse HEAD master develop
查看几个分支和节点的40位sha1哈希值

git checkout
查看缓存区当中的文件内容

git checkout head.h
如果缓存区中有内容，则用缓存区内容覆盖工作区内容，如果缓存区中没有内容，则用版本库中内容覆盖工作区


git clean -fd
清除工作区中除版本库以外的内容
git checkout .
再用版本库中的内容覆盖本地文件
git stash save "stash description"

git add -u
加入到缓存区中，工作去中所有被追踪的删除文件
git add -A
加入到缓存区中，执行所有本地新增、修改和删除的文件。

git archive -o 1.tar --prefix=1.0/ HEAD(或标签号等)
将当前版本加个文件前追名文件夹，并且打包生成一个1.tar压缩文件
git archive -o develop.tar HEAD
根据HEAD节点建立归档文件

git diff --word-diff
按字符比较
diff --git a/tcp_clone.conf b/tcp_clone.conf
index d4a586b..09b41cc 100644
--- a/tcp_clone.conf
+++ b/tcp_clone.conf
@@ -2,7 +2,7 @@
# netdev set suppurt moer net device for more user and more route
# set example:
# netdev=eth0,eth1
[-netdev=eth0,eth1-]{+netdev=eth0+}

# parament per clone and send percentage of packet tcp protocol
# set example:

如上所示：[-XXXX-]为减少的内容，{+XXXX+}为增加的内容

========================
从缓存当中删除跟踪文件，相当于彻底取消跟踪，区别用索引重置缓存当中的文件（撤销缓存）
$git rm --cached FILENAME
这样就可以了，如果后面跟的是目录就加上个 -r  就行了
（这个操作不会删除这个文件）

========================
生成git专用补丁及打补丁：
git format-patch HEAD^
0001-temp-Multi-user-version.patch
注意，生成不定填写的补丁名字是该版本到目前版本的补丁，也就是说，要生成当前节点的补丁，要提交当前节点的前一个版本的名字
git format-patch HEAD^
生成补丁

git am --abort
撤销先前打的补丁
git am ~/patch-set/*.patch
打补丁

注意：打补丁时如果出现提示，请注意看提示的内容，如下是因为打的补丁的内容里，在宏定义之后出现了空格
/home/zly/share/tcp_clone/.git/rebase-apply/patch:422: trailing whitespace.
#if DEBUG	
warning: 1 line adds whitespace errors.
========================
生成标准补丁及打补丁：
git diff current-use release-1.0.3 pipm.c > pipm.patch
比较release-1.0.3分支比current-use分支的pipm.c文件的变化，并生成补丁
git apply --stat pipm.patch
检查补丁
git apply --check  pipm.patch
检查是否应用成功，如果能通过，则检查不出现任何提示
git apply pipm.patch
打上该补丁

========================
git reverts HEAD
反转提交，即将上次提交的内容撤销为如没上次提交以前的样子

git commit --allow-empty -m "test 2"
提交一次名为test 2的强行提交，本次提交可以有内容，也可以为空提交内容

git clone --bare zly@192.168.1.19:test.git
克隆裸版本库

git init --bare test.git
建立裸版本库
进入test.git之后ls可以看见文件：
~/test.git$ ls
branches  config  description  HEAD  hooks  info  objects  refs

git revert HEAD
反提交，回退提交一个版本

git reflog HEAD | head -5
查看操作日志，查看最近5个
git reflog HEAD | taill -5
查看操作日志，最开始5个

git show-ref
查看引用，查看标签对应的版本号

 git fsck
查看版本库中对象的关联

 git prune
清楚所有失效关联

git reflog --expire expire=now --all
强制清理日志，使全部内容以当前时间过期然后用上边取消关联的命令清理无效内容给版本库瘦身

git config --list
查看用户配置选项

git config [--global] user.name user3
设置git用户名，中括号内选项为全局生效，否则只本地生效，
参照此设置方法，可设置用户的其他选项

git log --oneline --decorate
查看里程碑及其他引用


git ls-remote
查看上游版本库的引用

git ls-remote mytag*
查看上有版本库名为mytag开头的版本库

git tag -n1
查看几列标签内容

git tag -l v1.4*
过滤查看表标签内容

$git describe master --always
v1.4.20-10-gcad1569
显示精简id

git cherry origin/current-use
查看本地领先远程提交

git push origin  :test
删除远程test分支


git log test...71b1c5e^ --oneline
查看test到71b1c5e^之间的日志

git commit -C 71b1c5e^
引用原来71b1c5e^这个版本的提交信息进行提交

git push origin test:master
用本地test分支更新远程origin的master分支，test必须基于master检出进行开发的

git rev-list --pretty=oneline test...eeaa42a
查看test到eeaa42a之间的工程

git checkout test
git rebase test_tmp
变基操作
git status
git add -u
git rebase --continue
如发生冲突，请在临时的空分支上继续修改添加文件，并继续变基，莫要进行提交，直至完成所有变基

git rev-parse 1.0
查看里程碑1.0这个提交的哈希值

git cat-file -p v1.4.0
查看里程碑v1.4.0对应的提交，请注意区别于本身的哈希值

git show v1.4.0
查看里程碑提交的全部内容

git tag v1.0 xxxxxx -m "xxxxx"
提交带说明的里程碑

git push origin --tags
推送所有里程碑到远端服务器

git push origin v1.0
推送v1.0里程碑到远端服务器

git push origin :refs/tags/0.1.3
删除远程服务器0.1.3的里程碑

git push origin :v3.0.2
删除远程服务器v3.0.2的里程碑

git grep -n pr_info pipm.c |grep -v \/\/
在pipm.c文件中查找pr_info没有被注释掉的行

$ git tag -f v1.0.0-3 1945911 -m "native filter ip set range from minimum to maximum"
Updated tag 'v1.0.0-3' (was d27b33b)
zly@zly-ThinkPad-Edge-E430:~/share/arus$ git log --oneline --decorate
5e1e3a9 (HEAD, release-1.0.0) modify check filter ip to range from minimun to maximum in source code
1945911 (tag: v1.0.0-3) add chkbwlist get ipfilter.cfg user to not add route
f80884b fix bug for make install cp ipfilter.cfg extension error

更新里程碑v1.0.0-3为1945911节点，如不加节点哈希，则为当前节点，并重新提交描述





graph	图形
reverts	恢复
bare	只
=================================
子树合并过程：
1.git remote add util ../test_git8/
加入要合并的版本库


查看本地和远程分支
git branch -a
* master
  remotes/origin/master
  remotes/util/master


2.git checkout -b util util/master
由新加入的版本库新建本地分支

3.git checkout master
切换回要加入新版本库的原本地版本库
（当然，2,3上两条操作可合并成一条，直接在本地版本库上由新加入的版本库新建一个本地分支，而不切换到该分支上，并切换回来）
用git branch util util/master命令


4.git read-tree util
将新加入版本库读到缓存中
（如果新旧版本库中的文件名有重叠，则可建立子目录放置新加入版本库中文件git read-tree --prefix=lib util）

5.git checkout test8.txt
（相应的，如果是放入子目录当中的版本库文件，这样操作 git checkout -- lib 两个短横线中间没有空格，断横线两边分别都有空格，lib这个关键词是指放置新加入版本库的目录名，与上条命令对应）

6.git write-tree
用此命令合并原来版本库和新加入版本库中的内容


git write-tree
91611cc000d773f742ecf104cc5a814dbea828da
手动提交两个分支的合并
git cat-file -p 91611
100644 blob 070330a0dcb32707bc253a8402c3cdc966f7e87c	test.txt
100644 blob bafd9cbe905d0888077ab4c3575d559b76f41503	test8.txt

可以看见，手动合并后的文件文件的哈希值，与本地版本库和新加入版本库中文件的哈希值是一样的。如下
git rev-parse util:test8.txt
bafd9cbe905d0888077ab4c3575d559b76f41503
git rev-parse HEAD:test.txt
070330a0dcb32707bc253a8402c3cdc966f7e87c

查看要合并的两个版本库的哈希值
git rev-parse HEAD
b75f79f6e1f9e4925a6eb71d40f6c2d8372c61b3

git rev-parse util
fb42c4e05f3bc0f55f901f6c372421ba87d2e5ff

7.手动合并两个分支
echo "test" | \
git commit-tree 91611cc000d773f742ecf104cc5a814dbea828da \
-p b75f79f6e1f9e4925a6eb71d40f6c2d8372c61b3 \
-p fb42c4e05f3bc0f55f901f6c372421ba87d2e5ff
7a1909fdfc0e24e9aa6ec1037847ca840b6eb46d

8.将本地库重置为提交后合并后的新节点
git reset 7a1909fdfc0e24e9aa6ec1037847ca840b6eb46d

查看提交后的日志
git log --oneline --graph

*   7a1909f test
|\  
| * fb42c4e add end flag
| * 3beb5c5 test8.txt
*   b75f79f merge ddd to 444
|\  
| * db636b8 bbb to 222
| * 88bb205 aaa to 111
| * 6964695 add 333
| * 5e1a5db add 222
| * b09170a add 111
| * dce7830 ccc to 333
* | 996269e bbb to 222
* | 0cbf563 aaa to 111
* | d33c1bf add 333
* | a27eeaa add 222
* | f134556 add 111
* | d7a3874 ccc to 333
* | 0498189 ddd to 444
|/  
* 8ad6e78 abcdefgh
=================================
修改历史记录：（注意：此时提交的hash记录节点，是从提交的该节点向后进行的，即要修改某节点，一定要指定此节点的前一个hash节点的值）
git rebase -i 829dca2

pick e4e21b6 optimization script search parameter and addition show
pick c909be0 optimization shell script addition check user set netdevice and independented configure file
pick 0d31b20 fix bug of net device configure at insert modules in shell script
pick f892e3a optimization shell script prompt infomation
pick 3108f06 optimization percentage to 1%

将需要修改的历史日志标记，即pick改成edit
edit e4e21b6 optimization script search parameter and addition show
pick c909be0 optimization shell script addition check user set netdevice and independented configure file
pick 0d31b20 fix bug of net device configure at insert modules in shell script
pick f892e3a optimization shell script prompt infomation
pick 3108f06 optimization percentage to 1%
保存退出

执行：git commit --amend
提交进行修改：
optimization script search parameter and addition show
改为
optimization script check parameter and addition show
保存退出

$ git commit --amend
[detached HEAD e4e21b6] optimization script check parameter and addition show
 1 file changed, 27 insertions(+), 14 deletions(-)

$ git rebase --continue 
Successfully rebased and updated refs/heads/develop.


=================================
建立本地裸版本库作为存储方法:
1.
$git init --bare ../test_git1
建立裸版本库(公认的习惯是诸如test.git的以.git结尾文件夹名称，在此用test_git只是为了证明裸版本库不用这个*.git的文件夹名称也能成功，而且与文件夹内包含不包含.git无关，既然无关则不用增加多余的麻烦为好，即不必在裸版本库文件夹下再添加.git隐藏文件夹)
2.
$git remote add origin ../test_git
添加远程版本库
3.
$git push origin master:master
向远程版本库中推送本地版本库（分支名称可任意分支）
=================================
git init --bare
解决办法就是使用”git init –bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）
=================================
差异比较：

$ git log --oneline 
e662008 new file test8.txt
574d2e4 new file test8.txt
eeaa42a merge new branch
8a987b8 merge.txt:test
062b6e7 merge.txt:abc
df51775 merge new7.txt:abc,def
71b1c5e make new7.txt:def
6253476 make new7.txt:abc
3525981 new7txt: abc ,def
a7d6cdc new file new7.txt:def
e2542f0 new file new7.txt abc
a6edf6a new file new5.txt
fe399a9 Merge branch 'test' of file:///home/zly/test/test_git/test_git1/ into test
b9fc3d9 new file new4.txt
f72a624 new file new3.txt
fbcd218 new file new.txt
abf83ae new file new.txt
ed10f48 ++test.c
6f50a45 v0.4 add+sub+mul function
88642b0 v0.3 add+sub+mul fuction
a656e00 v0.2 add+sub+mul
0f732e9 v0.1 add+sun+mul function

$ git cat-file -p 71b1c5e:new7.txt
new file new7.txt:def
new file new7 abc
make def

$ git cat-file -p HEAD:new7.txt
new file new7.txt:def
new file new7 abc
make def
make abc

$ git diff
diff --cc new7.txt
index 38526f3,1336248..0000000
--- a/new7.txt
+++ b/new7.txt
@@@ -1,4 -1,3 +1,7 @@@
  new file new7.txt:def
  new file new7 abc
  make def
++<<<<<<< HEAD
 +make abc
++=======
++>>>>>>> 71b1c5e... make new7.txt:def
解析：
-1,4是指当前文件的内容是从第一行开始一共四行
-1,3是指合并文件的内容是从第一行开始一共三行
+1,7是指合并后生成的文件从第一行开始一共七行
<<<<<<<到=======之间是当前文件的内容
=======到>>>>>>>是合并上来文件的内容

=======================
git push 的 -u 参数具体适合含义？
http://www.zhihu.com/question/20019419
git push -u remotebranch localbranch之后，除了完成推送动作之外，还会将默认远程库设置成为该远程分支

=======================
实验路径zly@zly-ThinkPad-Edge-E430:~/share/test/test_git_meger
保持节点完整的提交合并方式，保持两个合并节点链完整，均新生成个新的提交节点，在两个分支有冲突是体现的极为有意义。
git merge develop --no-ff

将如下两个分支合并的效果：

$ git checkout develop 
Switched to branch 'develop'
$ git log --oneline 
13cad8b add multiplication
0906166 add sub
8162098 mathematical operation init

其中主分支是在第一节点的基础上，又有了新提交：

提交前是同develop分支的第一个节点，即develop分支即在master分支的第一个节点上新建的分支
git branch 
  develop
* master
$ git log --oneline 
8162098 mathematical operation init

提交后：
$ git commit -m "add division"
[master 10ddd6a] add division
 1 file changed, 5 insertions(+)
$ git log --oneline 
10ddd6a add division
8162098 mathematical operation init

这样两个分支合并时便会产生冲突：

合并时产生冲突：
$ git merge --no-ff develop 
Auto-merging main.c
CONFLICT (content): Merge conflict in main.c
Automatic merge failed; fix conflicts and then commit the result.

查看状态
$ git status -s
UU main.c

编辑冲突，加入提交，查看状态
$ vi main.c 
$ git add -u
$ git status -s
M  main.c

提交后就两个分支的合并产生新节点：
$ git commit -m "add mul and sub"
[master 5db9bcb] add mul and sub

查看图谱：
$ git log --oneline --graph 
*   5db9bcb add mul and sub
|\  
| * 13cad8b add multiplication
| * 0906166 add sub
* | 10ddd6a add division
|/  
* 8162098 mathematical operation init





















